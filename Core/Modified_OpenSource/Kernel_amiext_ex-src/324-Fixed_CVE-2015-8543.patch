--- linux_patch318/include/net/sock.h	2020-04-01 11:18:09.485961524 +0800
+++ linux/include/net/sock.h	2020-04-06 14:58:39.835578840 +0800
@@ -374,6 +374,7 @@
 				sk_no_check  : 2,
 				sk_userlocks : 4,
 				sk_protocol  : 8,
+#define SK_PROTOCOL_MAX U8_MAX
 				sk_type      : 16;
 	kmemcheck_bitfield_end(flags);
 	int			sk_wmem_queued;
--- linux_patch318/net/ax25/af_ax25.c	2020-04-01 11:14:10.646143625 +0800
+++ linux/net/ax25/af_ax25.c	2020-04-06 14:59:26.919569198 +0800
@@ -806,6 +806,9 @@
 	struct sock *sk;
 	ax25_cb *ax25;
 
+	if (protocol < 0 || protocol > SK_PROTOCOL_MAX)
+		return -EINVAL;
+
 	if (!net_eq(net, &init_net))
 		return -EAFNOSUPPORT;
 
--- linux_patch318/net/decnet/af_decnet.c	2020-04-01 11:14:29.038129342 +0800
+++ linux/net/decnet/af_decnet.c	2020-04-06 15:00:22.411557945 +0800
@@ -677,6 +677,9 @@
 {
 	struct sock *sk;
 
+	if (protocol < 0 || protocol > SK_PROTOCOL_MAX)
+		return -EINVAL;
+
 	if (!net_eq(net, &init_net))
 		return -EAFNOSUPPORT;
 
--- linux_patch318/net/ipv4/af_inet.c	2020-04-01 11:14:14.282140797 +0800
+++ linux/net/ipv4/af_inet.c	2020-04-06 15:01:35.039543372 +0800
@@ -258,8 +258,8 @@
 	int try_loading_module = 0;
 	int err;
 
-	if (protocol >= IPPROTO_MAX)
-		return -EINVAL;	
+	if (protocol < 0 || protocol >= IPPROTO_MAX)
+		return -EINVAL;
 	
 	sock->state = SS_UNCONNECTED;
 
--- linux_patch318/net/ipv6/af_inet6.c	2020-04-01 11:14:21.010135571 +0800
+++ linux/net/ipv6/af_inet6.c	2020-04-06 15:03:24.707521697 +0800
@@ -110,9 +110,9 @@
 	int try_loading_module = 0;
 	int err;
 
-	if (protocol >= IPPROTO_MAX)
+	if (protocol < 0 || protocol >= IPPROTO_MAX)
 		return -EINVAL;
-	
+
 	/* Look for the requested type/protocol pair. */
 lookup_protocol:
 	err = -ESOCKTNOSUPPORT;
--- linux_patch318/net/irda/af_irda.c	2020-04-01 11:14:10.622143643 +0800
+++ linux/net/irda/af_irda.c	2020-04-06 15:04:26.463509675 +0800
@@ -1101,6 +1101,9 @@
 	struct sock *sk;
 	struct irda_sock *self;
 
+	if (protocol < 0 || protocol > SK_PROTOCOL_MAX)
+		return -EINVAL;
+
 	IRDA_DEBUG(2, "%s()\n", __func__);
 
 	if (net != &init_net)
