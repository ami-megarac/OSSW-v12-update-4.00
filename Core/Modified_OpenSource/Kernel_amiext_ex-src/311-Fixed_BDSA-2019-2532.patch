--- linux_patch307/fs/exec.c	2020-03-30 10:43:07.469130177 +0800
+++ linux/fs/exec.c	2020-03-31 11:40:32.800578930 +0800
@@ -1568,7 +1568,7 @@
 	current->fs->in_exec = 0;
 	current->in_execve = 0;
 	acct_update_integrals(current);
-	task_numa_free(current);
+	task_numa_free(current, false);
 	free_bprm(bprm);
 	putname(filename);
 	if (displaced)
--- linux_patch307/include/linux/sched.h	2020-03-30 10:44:34.873100186 +0800
+++ linux/include/linux/sched.h	2020-03-31 11:41:47.032515372 +0800
@@ -1598,7 +1598,7 @@
 extern void task_numa_fault(int last_node, int node, int pages, int flags);
 extern pid_t task_numa_group_id(struct task_struct *p);
 extern void set_numabalancing_state(bool enabled);
-extern void task_numa_free(struct task_struct *p);
+extern void task_numa_free(struct task_struct *p, bool final);
 
 extern unsigned int sysctl_numa_balancing_migrate_deferred;
 #else
@@ -1613,7 +1613,7 @@
 static inline void set_numabalancing_state(bool enabled)
 {
 }
-static inline void task_numa_free(struct task_struct *p)
+static inline void task_numa_free(struct task_struct *p, bool final)
 {
 }
 #endif
--- linux_patch307/kernel/sched/fair.c	2020-03-30 10:42:09.485149976 +0800
+++ linux/kernel/sched/fair.c	2020-03-31 11:45:24.624927788 +0800
@@ -1558,11 +1558,18 @@
 	return;
 }
 
-void task_numa_free(struct task_struct *p)
+/*
+ * Get rid of NUMA staticstics associated with a task (either current or dead).
+ * If @final is set, the task is dead and has reached refcount zero, so we can
+ * safely free all relevant data structures. Otherwise, there might be
+ * concurrent reads from places like load balancing and procfs, and we should
+ * reset the data back to default state without freeing ->numa_faults.
+ */
+void task_numa_free(struct task_struct *p, bool final)
 {
 	struct numa_group *grp = p->numa_group;
 	int i;
-	void *numa_faults = p->numa_faults;
+	unsigned long *numa_faults = p->numa_faults;
 
 	if (grp) {
 		spin_lock(&grp->lock);
@@ -1577,8 +1584,14 @@
 		put_numa_group(grp);
 	}
 
-	p->numa_faults = NULL;
-	p->numa_faults_buffer = NULL;
+	if (final) {
+		p->numa_faults = NULL;
+		kfree(numa_faults);
+	} else {
+		p->total_numa_faults = 0;
+		for (i = 0; i < NR_NUMA_HINT_FAULT_STATS * nr_node_ids; i++)
+			numa_faults[i] = 0;
+	}
 	kfree(numa_faults);
 }
 
--- linux_patch307/kernel/sched/core.c	2020-03-30 10:42:09.537149958 +0800
+++ linux/kernel/sched/core.c	2020-03-31 11:50:25.781522994 +0800
@@ -2149,7 +2149,7 @@
 	if (mm)
 		mmdrop(mm);
 	if (unlikely(prev_state == TASK_DEAD)) {
-		task_numa_free(prev);
+		task_numa_free(prev,true);
 
 		if (prev->sched_class->task_dead)
 			prev->sched_class->task_dead(prev);
