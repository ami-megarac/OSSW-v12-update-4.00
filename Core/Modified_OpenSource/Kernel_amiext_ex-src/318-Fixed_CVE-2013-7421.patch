--- linux_patch307/arch/arm/crypto/aes_glue.c	2020-03-30 10:42:02.121152484 +0800
+++ linux/arch/arm/crypto/aes_glue.c	2020-03-31 16:20:07.167256000 +0800
@@ -93,6 +93,6 @@
 
 MODULE_DESCRIPTION("Rijndael (AES) Cipher Algorithm (ASM)");
 MODULE_LICENSE("GPL");
-MODULE_ALIAS("aes");
-MODULE_ALIAS("aes-asm");
+MODULE_ALIAS_CRYPTO("aes");
+MODULE_ALIAS_CRYPTO("aes-asm");
 MODULE_AUTHOR("David McCullough <ucdevel@gmail.com>");
--- linux_patch307/arch/arm/crypto/sha1_glue.c	2020-03-30 10:42:02.065152503 +0800
+++ linux/arch/arm/crypto/sha1_glue.c	2020-03-31 16:20:47.183239252 +0800
@@ -175,5 +175,5 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("SHA1 Secure Hash Algorithm (ARM)");
-MODULE_ALIAS("sha1");
+MODULE_ALIAS_CRYPTO("sha1");
 MODULE_AUTHOR("David McCullough <ucdevel@gmail.com>");
--- linux_patch307/crypto/842.c	2020-03-30 10:42:33.937141636 +0800
+++ linux/crypto/842.c	2020-03-31 16:25:33.143120036 +0800
@@ -180,3 +180,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("842 Compression Algorithm");
+MODULE_ALIAS_CRYPTO("842");
--- linux_patch307/crypto/aes_generic.c	2020-03-30 10:42:33.417141814 +0800
+++ linux/crypto/aes_generic.c	2020-03-31 16:26:04.787106891 +0800
@@ -1474,4 +1474,4 @@
 
 MODULE_DESCRIPTION("Rijndael (AES) Cipher Algorithm");
 MODULE_LICENSE("Dual BSD/GPL");
-MODULE_ALIAS("aes");
+MODULE_ALIAS_CRYPTO("stdrng");
--- linux_patch307/crypto/anubis.c	2020-03-30 10:42:33.745141702 +0800
+++ linux/crypto/anubis.c	2020-03-31 16:26:33.567094944 +0800
@@ -704,3 +704,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Anubis Cryptographic Algorithm");
+MODULE_ALIAS_CRYPTO("anubis");
--- linux_patch307/crypto/api.c	2020-03-30 10:42:33.665141729 +0800
+++ linux/crypto/api.c	2020-03-31 16:27:48.467063888 +0800
@@ -216,11 +216,11 @@
 
 	alg = crypto_alg_lookup(name, type, mask);
 	if (!alg) {
-		request_module("%s", name);
+		request_module("crypto-%s", name);
 
 		if (!((type ^ CRYPTO_ALG_NEED_FALLBACK) & mask &
 		      CRYPTO_ALG_NEED_FALLBACK))
-			request_module("%s-all", name);
+			request_module("crypto-%s-all", name);
 
 		alg = crypto_alg_lookup(name, type, mask);
 	}
--- linux_patch307/crypto/arc4.c	2020-03-30 10:42:33.621141744 +0800
+++ linux/crypto/arc4.c	2020-03-31 16:28:10.471054775 +0800
@@ -166,3 +166,4 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("ARC4 Cipher Algorithm");
 MODULE_AUTHOR("Jon Oberheide <jon@oberheide.org>");
+MODULE_ALIAS_CRYPTO("arc4");
--- linux_patch307/crypto/blowfish_generic.c	2020-03-30 10:42:34.013141610 +0800
+++ linux/crypto/blowfish_generic.c	2020-03-31 16:28:39.867042606 +0800
@@ -138,4 +138,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Blowfish Cipher Algorithm");
-MODULE_ALIAS("blowfish");
+MODULE_ALIAS_CRYPTO("blowfish");
--- linux_patch307/crypto/camellia_generic.c	2020-03-30 10:42:32.033142286 +0800
+++ linux/crypto/camellia_generic.c	2020-03-31 16:29:08.739030661 +0800
@@ -1098,4 +1098,4 @@
 
 MODULE_DESCRIPTION("Camellia Cipher Algorithm");
 MODULE_LICENSE("GPL");
-MODULE_ALIAS("camellia");
+MODULE_ALIAS_CRYPTO("camellia");
--- linux_patch307/crypto/cast5_generic.c	2020-03-30 10:42:32.217142223 +0800
+++ linux/crypto/cast5_generic.c	2020-03-31 16:29:48.939014043 +0800
@@ -549,4 +549,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Cast5 Cipher Algorithm");
-MODULE_ALIAS("cast5");
+MODULE_ALIAS_CRYPTO("cast5");
--- linux_patch307/crypto/cast6_generic.c	2020-03-30 10:42:33.205141885 +0800
+++ linux/crypto/cast6_generic.c	2020-03-31 16:30:12.947004124 +0800
@@ -291,4 +291,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Cast6 Cipher Algorithm");
-MODULE_ALIAS("cast6");
+MODULE_ALIAS_CRYPTO("cast6");
--- linux_patch307/crypto/ccm.c	2020-03-30 10:42:34.017141609 +0800
+++ linux/crypto/ccm.c	2020-03-31 16:30:52.542987780 +0800
@@ -879,5 +879,5 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Counter with CBC MAC");
-MODULE_ALIAS("ccm_base");
-MODULE_ALIAS("rfc4309");
+MODULE_ALIAS_CRYPTO("ccm_base");
+MODULE_ALIAS_CRYPTO("rfc4309");
--- linux_patch307/crypto/crc32.c	2020-03-30 10:42:33.205141885 +0800
+++ linux/crypto/crc32.c	2020-03-31 16:31:22.594975381 +0800
@@ -156,3 +156,4 @@
 MODULE_AUTHOR("Alexander Boyko <alexander_boyko@xyratex.com>");
 MODULE_DESCRIPTION("CRC32 calculations wrapper for lib/crc32");
 MODULE_LICENSE("GPL");
+MODULE_ALIAS_CRYPTO("crc32");
--- linux_patch307/crypto/crct10dif_generic.c	2020-03-30 10:42:33.513141780 +0800
+++ linux/crypto/crct10dif_generic.c	2020-03-31 16:32:06.042957469 +0800
@@ -124,4 +124,4 @@
 MODULE_AUTHOR("Tim Chen <tim.c.chen@linux.intel.com>");
 MODULE_DESCRIPTION("T10 DIF CRC calculation.");
 MODULE_LICENSE("GPL");
-MODULE_ALIAS("crct10dif");
+MODULE_ALIAS_CRYPTO("crct10dif");
--- linux_patch307/crypto/crypto_null.c	2020-03-30 10:42:33.693141719 +0800
+++ linux/crypto/crypto_null.c	2020-03-31 16:32:56.010936892 +0800
@@ -149,9 +149,9 @@
 	.coa_decompress		=	null_compress } }
 } };
 
-MODULE_ALIAS("compress_null");
-MODULE_ALIAS("digest_null");
-MODULE_ALIAS("cipher_null");
+MODULE_ALIAS_CRYPTO("compress_null");
+MODULE_ALIAS_CRYPTO("digest_null");
+MODULE_ALIAS_CRYPTO("cipher_null");
 
 static int __init crypto_null_mod_init(void)
 {
--- linux_patch307/crypto/ctr.c	2020-03-30 10:42:33.665141729 +0800
+++ linux/crypto/ctr.c	2020-03-31 16:33:23.430925608 +0800
@@ -466,4 +466,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("CTR Counter block mode");
-MODULE_ALIAS("rfc3686");
+MODULE_ALIAS_CRYPTO("rfc3686");
--- linux_patch307/crypto/deflate.c	2020-03-30 10:42:33.665141729 +0800
+++ linux/crypto/deflate.c	2020-03-31 16:33:55.598912380 +0800
@@ -222,4 +222,4 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Deflate Compression Algorithm for IPCOMP");
 MODULE_AUTHOR("James Morris <jmorris@intercode.com.au>");
-
+MODULE_ALIAS_CRYPTO("deflate");
--- linux_patch307/crypto/des_generic.c	2020-03-30 10:42:33.665141729 +0800
+++ linux/crypto/des_generic.c	2020-03-31 16:36:09.158850139 +0800
@@ -971,7 +971,7 @@
 	.cia_decrypt		=	des3_ede_decrypt } }
 } };
 
-MODULE_ALIAS("des3_ede");
+MODULE_ALIAS_CRYPTO("des3_ede");
 
 static int __init des_generic_mod_init(void)
 {
@@ -989,4 +989,7 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("DES & Triple DES EDE Cipher Algorithms");
 MODULE_AUTHOR("Dag Arne Osvik <da@osvik.no>");
-MODULE_ALIAS("des");
+MODULE_ALIAS_CRYPTO("des");
+MODULE_ALIAS_CRYPTO("des-generic");
+MODULE_ALIAS_CRYPTO("des3_ede");
+MODULE_ALIAS_CRYPTO("des3_ede-generic");
--- linux_patch307/crypto/fcrypt.c	2020-03-30 10:42:34.013141610 +0800
+++ linux/crypto/fcrypt.c	2020-03-31 16:36:38.162835875 +0800
@@ -420,3 +420,4 @@
 MODULE_LICENSE("Dual BSD/GPL");
 MODULE_DESCRIPTION("FCrypt Cipher Algorithm");
 MODULE_AUTHOR("David Howells <dhowells@redhat.com>");
+MODULE_ALIAS_CRYPTO("fcrypt");
--- linux_patch307/crypto/gcm.c	2020-03-30 10:42:33.349141837 +0800
+++ linux/crypto/gcm.c	2020-03-31 16:37:35.478807757 +0800
@@ -1441,6 +1441,6 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Galois/Counter Mode");
 MODULE_AUTHOR("Mikko Herranen <mh1@iki.fi>");
-MODULE_ALIAS("gcm_base");
-MODULE_ALIAS("rfc4106");
-MODULE_ALIAS("rfc4543");
+MODULE_ALIAS_CRYPTO("gcm_base");
+MODULE_ALIAS_CRYPTO("rfc4106");
+MODULE_ALIAS_CRYPTO("rfc4543");
--- linux_patch307/crypto/ghash-generic.c	2020-03-30 10:42:33.149141905 +0800
+++ linux/crypto/ghash-generic.c	2020-03-31 16:38:11.854789954 +0800
@@ -172,4 +172,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("GHASH Message Digest Algorithm");
-MODULE_ALIAS("ghash");
+MODULE_ALIAS_CRYPTO("ghash");
--- linux_patch307/crypto/khazad.c	2020-03-30 10:42:31.965142309 +0800
+++ linux/crypto/khazad.c	2020-03-31 16:38:24.966783548 +0800
@@ -880,3 +880,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Khazad Cryptographic Algorithm");
+MODULE_ALIAS_CRYPTO("khazad");
--- linux_patch307/crypto/krng.c	2020-03-30 10:42:33.725141709 +0800
+++ linux/crypto/krng.c	2020-03-31 16:39:09.194761970 +0800
@@ -62,4 +62,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Kernel Random Number Generator");
-MODULE_ALIAS("stdrng");
+MODULE_ALIAS_CRYPTO("stdrng");
--- linux_patch307/crypto/lz4.c	2020-03-30 10:42:33.917141643 +0800
+++ linux/crypto/lz4.c	2020-03-31 16:39:38.846747530 +0800
@@ -104,3 +104,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("LZ4 Compression Algorithm");
+MODULE_ALIAS_CRYPTO("lz4hc");
--- linux_patch307/crypto/lzo.c	2020-03-30 10:42:32.829142014 +0800
+++ linux/crypto/lzo.c	2020-03-31 16:40:10.094732340 +0800
@@ -103,3 +103,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("LZO Compression Algorithm");
+MODULE_ALIAS_CRYPTO("lzo");
--- linux_patch307/crypto/md4.c	2020-03-30 10:42:32.849142008 +0800
+++ linux/crypto/md4.c	2020-03-31 16:40:29.162723083 +0800
@@ -255,4 +255,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("MD4 Message Digest Algorithm");
-
+MODULE_ALIAS_CRYPTO("md4");
--- linux_patch307/crypto/md5.c	2020-03-30 10:42:34.245141531 +0800
+++ linux/crypto/md5.c	2020-03-31 16:40:51.858712078 +0800
@@ -168,3 +168,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("MD5 Message Digest Algorithm");
+MODULE_ALIAS_CRYPTO("md5");
--- linux_patch307/crypto/michael_mic.c	2020-03-30 10:42:32.209142226 +0800
+++ linux/crypto/michael_mic.c	2020-03-31 16:42:06.670675891 +0800
@@ -184,3 +184,4 @@
 MODULE_LICENSE("GPL v2");
 MODULE_DESCRIPTION("Michael MIC");
 MODULE_AUTHOR("Jouni Malinen <j@w1.fi>");
+MODULE_ALIAS_CRYPTO("michael_mic");
--- linux_patch307/crypto/rmd128.c	2020-03-30 10:42:32.213142224 +0800
+++ linux/crypto/rmd128.c	2020-03-31 16:42:28.498665360 +0800
@@ -326,4 +326,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Adrian-Ken Rueegsegger <ken@codelabs.ch>");
-MODULE_DESCRIPTION("RIPEMD-128 Message Digest");
+MODULE_ALIAS_CRYPTO("rmd128");
--- linux_patch307/crypto/rmd160.c	2020-03-30 10:42:34.277141520 +0800
+++ linux/crypto/rmd160.c	2020-03-31 18:04:34.012611225 +0800
@@ -371,3 +371,4 @@
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Adrian-Ken Rueegsegger <ken@codelabs.ch>");
 MODULE_DESCRIPTION("RIPEMD-160 Message Digest");
+MODULE_ALIAS_CRYPTO("rmd160");
--- linux_patch307/crypto/rmd256.c	2020-03-30 10:42:32.333142183 +0800
+++ linux/crypto/rmd256.c	2020-03-31 18:04:56.548602797 +0800
@@ -346,3 +346,4 @@
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Adrian-Ken Rueegsegger <ken@codelabs.ch>");
 MODULE_DESCRIPTION("RIPEMD-256 Message Digest");
+MODULE_ALIAS_CRYPTO("rmd256");
--- linux_patch307/crypto/rmd320.c	2020-03-30 10:42:34.293141515 +0800
+++ linux/crypto/rmd320.c	2020-03-31 18:05:17.668594892 +0800
@@ -395,3 +395,4 @@
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Adrian-Ken Rueegsegger <ken@codelabs.ch>");
 MODULE_DESCRIPTION("RIPEMD-320 Message Digest");
+MODULE_ALIAS_CRYPTO("rmd320");
--- linux_patch307/crypto/salsa20_generic.c	2020-03-30 10:42:33.513141780 +0800
+++ linux/crypto/salsa20_generic.c	2020-03-31 18:05:39.180586833 +0800
@@ -248,4 +248,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION ("Salsa20 stream cipher algorithm");
-MODULE_ALIAS("salsa20");
+MODULE_ALIAS_CRYPTO("salsa20");
--- linux_patch307/crypto/seed.c	2020-03-30 10:42:33.513141780 +0800
+++ linux/crypto/seed.c	2020-03-31 18:06:00.588578805 +0800
@@ -476,3 +476,4 @@
 MODULE_DESCRIPTION("SEED Cipher Algorithm");
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Hye-Shik Chang <perky@FreeBSD.org>, Kim Hyun <hkim@kisa.or.kr>");
+MODULE_ALIAS_CRYPTO("seed");
--- linux_patch307/crypto/serpent_generic.c	2020-03-30 10:42:33.693141719 +0800
+++ linux/crypto/serpent_generic.c	2020-03-31 18:06:28.748568233 +0800
@@ -665,5 +665,5 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Serpent and tnepres (kerneli compatible serpent reversed) Cipher Algorithm");
 MODULE_AUTHOR("Dag Arne Osvik <osvik@ii.uib.no>");
-MODULE_ALIAS("tnepres");
-MODULE_ALIAS("serpent");
+MODULE_ALIAS_CRYPTO("tnepres");
+MODULE_ALIAS_CRYPTO("serpent");
--- linux_patch307/crypto/sha1_generic.c	2020-03-30 10:42:33.389141823 +0800
+++ linux/crypto/sha1_generic.c	2020-03-31 18:06:51.428559710 +0800
@@ -153,4 +153,4 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("SHA1 Secure Hash Algorithm");
 
-MODULE_ALIAS("sha1");
+MODULE_ALIAS_CRYPTO("sha1");
--- linux_patch307/crypto/sha256_generic.c	2020-03-30 10:42:34.541141429 +0800
+++ linux/crypto/sha256_generic.c	2020-03-31 18:07:17.896549753 +0800
@@ -384,5 +384,6 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("SHA-224 and SHA-256 Secure Hash Algorithm");
 
-MODULE_ALIAS("sha224");
-MODULE_ALIAS("sha256");
+MODULE_ALIAS_CRYPTO("sha224");
+MODULE_ALIAS_CRYPTO("sha256");
+
--- linux_patch307/crypto/sha512_generic.c	2020-03-30 10:42:34.193141549 +0800
+++ linux/crypto/sha512_generic.c	2020-03-31 18:07:41.352540919 +0800
@@ -287,5 +287,5 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("SHA-512 and SHA-384 Secure Hash Algorithms");
 
-MODULE_ALIAS("sha384");
-MODULE_ALIAS("sha512");
+MODULE_ALIAS_CRYPTO("sha384");
+MODULE_ALIAS_CRYPTO("sha512");
--- linux_patch307/crypto/tea.c	2020-03-30 10:42:33.429141810 +0800
+++ linux/crypto/tea.c	2020-03-31 18:08:31.928521844 +0800
@@ -270,8 +270,8 @@
 	crypto_unregister_algs(tea_algs, ARRAY_SIZE(tea_algs));
 }
 
-MODULE_ALIAS("xtea");
-MODULE_ALIAS("xeta");
+MODULE_ALIAS_CRYPTO("xtea");
+MODULE_ALIAS_CRYPTO("xeta");
 
 module_init(tea_mod_init);
 module_exit(tea_mod_fini);
--- linux_patch307/crypto/tgr192.c	2020-03-30 10:42:33.633141740 +0800
+++ linux/crypto/tgr192.c	2020-03-31 18:09:06.912508623 +0800
@@ -676,8 +676,8 @@
 	crypto_unregister_shashes(tgr_algs, ARRAY_SIZE(tgr_algs));
 }
 
-MODULE_ALIAS("tgr160");
-MODULE_ALIAS("tgr128");
+MODULE_ALIAS_CRYPTO("tgr160");
+MODULE_ALIAS_CRYPTO("tgr128");
 
 module_init(tgr192_mod_init);
 module_exit(tgr192_mod_fini);
--- linux_patch307/crypto/twofish_generic.c	2020-03-30 10:42:32.313142190 +0800
+++ linux/crypto/twofish_generic.c	2020-03-31 18:09:30.280499785 +0800
@@ -211,4 +211,4 @@
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION ("Twofish Cipher Algorithm");
-MODULE_ALIAS("twofish");
+MODULE_ALIAS_CRYPTO("twofish");
--- linux_patch307/crypto/wp512.c	2020-03-30 10:42:34.565141422 +0800
+++ linux/crypto/wp512.c	2020-03-31 18:10:02.740487490 +0800
@@ -1167,8 +1167,8 @@
 	crypto_unregister_shashes(wp_algs, ARRAY_SIZE(wp_algs));
 }
 
-MODULE_ALIAS("wp384");
-MODULE_ALIAS("wp256");
+MODULE_ALIAS_CRYPTO("wp384");
+MODULE_ALIAS_CRYPTO("wp256");
 
 module_init(wp512_mod_init);
 module_exit(wp512_mod_fini);
--- linux_patch307/crypto/zlib.c	2020-03-30 10:42:33.621141744 +0800
+++ linux/crypto/zlib.c	2020-03-31 18:10:25.436478886 +0800
@@ -378,3 +378,4 @@
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Zlib Compression Algorithm");
 MODULE_AUTHOR("Sony Corporation");
+MODULE_ALIAS_CRYPTO("zlib");
--- linux_patch307/drivers/crypto/padlock-aes.c	2020-03-30 10:44:14.593107160 +0800
+++ linux/drivers/crypto/padlock-aes.c	2020-03-31 18:10:55.236467575 +0800
@@ -563,4 +563,4 @@
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Michal Ludvig");
 
-MODULE_ALIAS("aes");
+MODULE_ALIAS_CRYPTO("aes");
--- linux_patch307/drivers/crypto/padlock-sha.c	2020-03-30 10:44:14.457107207 +0800
+++ linux/drivers/crypto/padlock-sha.c	2020-03-31 18:11:24.424456484 +0800
@@ -593,7 +593,7 @@
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Michal Ludvig");
 
-MODULE_ALIAS("sha1-all");
-MODULE_ALIAS("sha256-all");
-MODULE_ALIAS("sha1-padlock");
-MODULE_ALIAS("sha256-padlock");
+MODULE_ALIAS_CRYPTO("sha1-all");
+MODULE_ALIAS_CRYPTO("sha256-all");
+MODULE_ALIAS_CRYPTO("sha1-padlock");
+MODULE_ALIAS_CRYPTO("sha256-padlock");
--- linux_patch307/drivers/crypto/ux500/cryp/cryp_core.c	2020-03-30 10:44:14.453107209 +0800
+++ linux/drivers/crypto/ux500/cryp/cryp_core.c	2020-03-31 18:12:22.860434241 +0800
@@ -1811,7 +1811,7 @@
 module_param(cryp_mode, int, 0);
 
 MODULE_DESCRIPTION("Driver for ST-Ericsson UX500 CRYP crypto engine.");
-MODULE_ALIAS("aes-all");
-MODULE_ALIAS("des-all");
+MODULE_ALIAS_CRYPTO("aes-all");
+MODULE_ALIAS_CRYPTO("des-all");
 
 MODULE_LICENSE("GPL");
--- linux_patch307/drivers/crypto/ux500/hash/hash_core.c	2020-03-30 10:44:14.457107207 +0800
+++ linux/drivers/crypto/ux500/hash/hash_core.c	2020-03-31 18:13:01.512419500 +0800
@@ -1995,7 +1995,7 @@
 MODULE_DESCRIPTION("Driver for ST-Ericsson UX500 HASH engine.");
 MODULE_LICENSE("GPL");
 
-MODULE_ALIAS("sha1-all");
-MODULE_ALIAS("sha256-all");
-MODULE_ALIAS("hmac-sha1-all");
-MODULE_ALIAS("hmac-sha256-all");
+MODULE_ALIAS_CRYPTO("sha1-all");
+MODULE_ALIAS_CRYPTO("sha256-all");
+MODULE_ALIAS_CRYPTO("hmac-sha1-all");
+MODULE_ALIAS_CRYPTO("hmac-sha256-all");
--- linux_patch307/drivers/s390/crypto/ap_bus.c	2020-03-30 10:44:25.753103324 +0800
+++ linux/drivers/s390/crypto/ap_bus.c	2020-03-31 18:14:34.124384093 +0800
@@ -44,6 +44,7 @@
 #include <linux/hrtimer.h>
 #include <linux/ktime.h>
 #include <asm/facility.h>
+#include <linux/crypto.h>
 
 #include "ap_bus.h"
 
@@ -71,7 +72,7 @@
 MODULE_DESCRIPTION("Adjunct Processor Bus driver, " \
 		   "Copyright IBM Corp. 2006, 2012");
 MODULE_LICENSE("GPL");
-MODULE_ALIAS("z90crypt");
+MODULE_ALIAS_CRYPTO("z90crypt");
 
 /*
  * Module parameter
--- linux_patch307/include/linux/crypto.h	2020-03-30 10:44:34.593100282 +0800
+++ linux/include/linux/crypto.h	2020-03-31 18:15:22.556365527 +0800
@@ -26,6 +26,19 @@
 #include <linux/uaccess.h>
 
 /*
+ * Autoloaded crypto modules should only use a prefixed name to avoid allowing
+ * arbitrary modules to be loaded. Loading from userspace may still need the
+ * unprefixed names, so retains those aliases as well.
+ * This uses __MODULE_INFO directly instead of MODULE_ALIAS because pre-4.3
+ * gcc (e.g. avr32 toolchain) uses __LINE__ for uniqueness, and this macro
+ * expands twice on the same line. Instead, use a separate base name for the
+ * alias.
+ */
+#define MODULE_ALIAS_CRYPTO(name)	\
+		__MODULE_INFO(alias, alias_userspace, name);	\
+		__MODULE_INFO(alias, alias_crypto, "crypto-" name)
+
+/*
  * Algorithm masks and types.
  */
 #define CRYPTO_ALG_TYPE_MASK		0x0000000f
--- linux_patch307/crypto/ansi_cprng.c	2020-03-30 10:42:33.341141839 +0800
+++ linux/crypto/ansi_cprng.c	2020-04-01 10:12:49.627703251 +0800
@@ -476,4 +476,4 @@
 MODULE_PARM_DESC(dbg, "Boolean to enable debugging (0/1 == off/on)");
 module_init(prng_mod_init);
 module_exit(prng_mod_fini);
-MODULE_ALIAS("stdrng");
+MODULE_ALIAS_CRYPTO("stdrng");
