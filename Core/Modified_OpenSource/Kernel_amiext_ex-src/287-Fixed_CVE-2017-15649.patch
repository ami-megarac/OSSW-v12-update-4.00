--- linux_patch281/net/packet/af_packet.c	2020-03-23 14:40:25.710467925 +0800
+++ linux/net/packet/af_packet.c	2020-03-24 16:04:47.850824911 +0800
@@ -1455,11 +1455,6 @@
 
 	mutex_lock(&fanout_mutex);
 
-	err = -EINVAL;
- 	if (!po->running)
-		goto out;
-
-
 	err = -EALREADY;
  	if (po->fanout)
 		goto out;
@@ -1497,7 +1492,9 @@
 		list_add(&match->list, &fanout_list);
 	}
 	err = -EINVAL;
-	if (match->type == type &&
+	spin_lock(&po->bind_lock);
+	if (po->running &&
+	    match->type == type &&
 	    match->prot_hook.type == po->prot_hook.type &&
 	    match->prot_hook.dev == po->prot_hook.dev) {
 		err = -ENOSPC;
@@ -1509,6 +1506,12 @@
 			err = 0;
 		}
 	}
+	spin_unlock(&po->bind_lock);
+
+	if (err && !atomic_read(&match->sk_ref)) {
+		list_del(&match->list);
+		kfree(match);
+	}
 out:
 	mutex_unlock(&fanout_mutex);
 	return err;
@@ -2652,16 +2655,16 @@
 	const struct net_device *dev_curr;
 	__be16 proto_curr;
 	bool need_rehook;
+	int ret = 0;
 
-	if (po->fanout) {
-		if (dev)
-			dev_put(dev);
+	lock_sock(sk);
+	spin_lock(&po->bind_lock);
 
-		return -EINVAL;
+	if (po->fanout) {
+		ret = -EINVAL;
+		goto out_unlock;
 	}
 
-	lock_sock(sk);
-	spin_lock(&po->bind_lock);
 
 	proto_curr = po->prot_hook.type;
 	dev_curr = po->prot_hook.dev;
